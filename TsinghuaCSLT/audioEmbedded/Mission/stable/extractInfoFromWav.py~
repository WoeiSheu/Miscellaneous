#!usr/bin/env python
#coding=utf-8

import wave  
import numpy as np  
import scipy.signal as signal  
import matplotlib.pyplot as plt  
import math
import disposeWav
import MCLT

def getInt(byte):   #得到8位二进制字符串对应的整数
    x = 0           #待修改,不明白为何少1
    count = 7
    for i in byte:
        x += int(i)*(2**count)
        count -= 1

    return x

def extractInfoWithLSB(audio, BlockLen, infoLen):  #提取以LSB嵌入的信息
    bytes = ''
    synchronization = "00111100001111000011110000111100"
    #length = 8*infoLen+len(synchronization)    #8位乘以n字节 #对于需要广播的音频无法使用
    length = BlockLen
    
    for i in range(length):
        if audio[0][i] % 2 == 0:
            bytes += '0'
        else:
            bytes += '1'
    
    while bytes.find(synchronization) == -1:
        synchronization = synchronization[0:len(synchronization)-8]
        if synchronization == "":
            break
    
    start = bytes.find(synchronization)
    bytes = bytes[start+len(synchronization):]
    info = ''        
    for i in range( infoLen ):
        byte = bytes[i*8:i*8+8]
        info += chr( getInt(byte) )
    
    return info

def extractInfoWithMCLT(audio, BlockLen, infoLen):
    L = 4
    r = [-1,1,-1,1]                  #扩展后的数组
    #synchronization = [-1,-1,-1,-1,-1,-1,1,1,1,1,1,1]
    synchronization = "00111100001111000011110000111100"
    #length = 8*infoLen + 8*len(synchronization)    #对于需要广播的音频无法使用
    length = BlockLen/2/L
    
    info = ''
    B = len(audio[0]) / BlockLen
    for i in range(B):
        bytes = ''
        if i % 2 == 1:
            continue
        X = MCLT.FastMCLT(audio[0][i*BlockLen:(i+1)*BlockLen])
        for k in range(length):
            sameLen = 0
            for m in range(L):
                if X[k*L+m].real > 0 and (m % 2 == 1):
                    sameLen += 1
                elif X[k*L+m].real < 0 and (m % 2 == 0):
                    sameLen += 1
            if sameLen <= 1:         #if sameLen <= 1:
                bytes += '0'
            elif sameLen >= 3:       #if sameLen >= 3:
                bytes += '1'
    
        #print bytes
        start = bytes.find(synchronization)
        bytes = bytes[start+len(synchronization):]
        for j in range( infoLen ):
            byte = bytes[j*8:j*8+8]
            info += chr( getInt(byte) )

    return info
    
def extractInfoWithFFT(audio, BlockLen, infoLen):
    synchronization = "00111100001111000011110000111100"
    bytes = ''
    info = ''
    B = len(audio[0]) / BlockLen
    length = 8*infoLen + 8*len(synchronization)      #对于需要广播的音频无法使用
    #length = BlockLen
    
    for i in range(B):
        FL = np.fft.rfft( audio[0][i*BlockLen:(i+1)*BlockLen] )
        #FR = np.fft.rfft( audio[1][i*BlockLen:(i+1)*BlockLen] )
        for k in range( length ):
            if FL[100+k].real > 0:
                bytes += '1'
            else:
                bytes += '0'
        
        start = bytes.find(synchronization)
        bytes = bytes[start+len(synchronization):]
        for j in range( infoLen ):
            byte = bytes[j*8:j*8+8]
            info += chr( getInt(byte) )
            
    return info
    

def test():
    nchannels, sampwidth, framerate, nframes, wave_data, time = disposeWav.read_wave_data("./wavFile/result1.wav")
    BlockLen = 4096
    infoLen = 9
    info = extractInfoWithLSB(wave_data, BlockLen, infoLen)
    print info
    
    nchannels, sampwidth, framerate, nframes, wave_data, time = disposeWav.read_wave_data("./wavFile/result2.wav")
    BlockLen = 4096
    infoLen = 9
    info = extractInfoWithMCLT(wave_data, BlockLen, infoLen)
    print info
    
    nchannels, sampwidth, framerate, nframes, wave_data, time = disposeWav.read_wave_data("./wavFile/result3.wav")
    BlockLen = 4096
    infoLen = 9
    info = extractInfoWithFFT(wave_data, BlockLen, infoLen)
    print info
    
    
    print nchannels, sampwidth, framerate, nframes
    
if __name__ == "__main__":
    test()
